plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    // Add the Protocol Buffers plugin
    id 'com.google.protobuf' version '0.9.4'
    id 'maven-publish'
}

group = 'com.sarmo'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceSets {
        main {
            java {
                // Use sourceSets configuration exactly as in your reference build.gradle
                srcDir 'build/generated/source/proto/main/java'
                srcDir 'src/main/java' // Your main source directory
                // Your reference does not include srcDir 'build/generated/source/proto/main/grpc'
                // Following the reference configuration.
            }
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    google()
}

ext {
    set('springCloudVersion', "2024.0.0")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // ----- Your existing dependencies from your reference build.gradle -----
    implementation 'com.sarmo:sarmo-kafka-dto:1.0'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // Jackson dependencies
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.3'

    // JWT dependencies
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Spring Boot Web for REST API
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring Security and OAuth2 Authorization Server (include if needed in this service)
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server' // If OAuth2 Auth Server is needed
    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'org.springframework.security:spring-security-oauth2-core'

    // Spring Security Crypto
    implementation 'org.springframework.security:spring-security-crypto'

    // Spring Boot Data JPA and Redis for database access (include if needed in this service)
    implementation 'jakarta.validation:jakarta.validation-api:3.1.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // For saving synced users
    implementation 'org.springframework.boot:spring-boot-starter-data-redis' // If Redis is needed
    runtimeOnly 'org.postgresql:postgresql' // If using PostgreSQL with JPA

    // Spring Boot Actuator for monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // ----- gRPC Client Dependencies (added for this task) -----
    // Spring Boot starter for gRPC client (version from your reference)
    implementation 'net.devh:grpc-client-spring-boot-starter:3.1.0.RELEASE'
    // gRPC Core, Stub, and Protobuf (versions from your reference, match the plugin)
    implementation 'io.grpc:grpc-protobuf:1.70.0'
    implementation 'io.grpc:grpc-stub:1.70.0'
    implementation 'io.grpc:grpc-core:1.70.0'
    // Netty - recommended transport for gRPC
    implementation 'io.grpc:grpc-netty:1.70.0'

    // Protocol Buffers Java Runtime (version from your reference, matches protoc artifact)
    implementation 'com.google.protobuf:protobuf-java:4.29.3'
    implementation 'com.google.protobuf:protobuf-java-util:4.29.3'


    // TODO: If proto files are in a common module, add a dependency here:
    // implementation project(':your-protobuf-common-module')


    // ----- Test dependencies -----
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test' // If Security tests are needed
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// ----- Protobuf Plugin Configuration EXACTLY AS IN YOUR REFERENCE -----
protobuf {
    protoc {
        // Specify the protoc compiler version. No :exe:${os.detected.classifier}
        artifact = 'com.google.protobuf:protoc:4.29.3'
    }
    plugins {
        grpc {
            // Specify the version for the gRPC Java code generator plugin. No :exe:${os.detected.classifier}
            artifact = 'io.grpc:protoc-gen-grpc-java:1.70.0'
        }
    }
    generateProtoTasks {
        all().configureEach { task ->
            task.plugins {
                grpc {}
            }
            // No lines like task.protoSourceSet.srcDirs here, exactly as in your reference
        }
    }
}

// From your reference
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-Xlint:unchecked"
}

// From your reference
tasks.named('test') {
    useJUnitPlatform()
}
